PORT=3000
DB_CONNECT_STRING = mongodb+srv://Coder:ryCpQo3DZzHfx3ug@coding.dnqpovs.mongodb.net/Leetcode
JWT_KEY = 88a362bb98389f685e65b56c0a871db20b2f4816383547183ac7d634593829b0
REDIS_PASS = diO5ragCpzrcH9T05ton0LA2PXVJkD3v
JUDGE0_KEY = 19af8b3e1emsh47c441a97323f02p110365jsndfb27029c819
GEMINI_KEY = AIzaSyCeOrdczsAMfr-dyNxqIsONRksnCRtLVqw

CLOUDINARY_CLOUD_NAME = dth9zoejy
CLOUDINARY_API_KEY = 543255113461552
CLOUDINARY_API_SECRET = 75wc0ovqgL17LwBhTvrg8RRaTxQ

CLOUDINARY_URL=cloudinary://543255113461552:75wc0ovqgL17LwBhTvrg8RRaTxQ@dth9zoejy




# import { useEffect, useState } from 'react';
# import { NavLink } from 'react-router';
# import { useDispatch, useSelector } from 'react-redux';
# import axiosClient from '../utils/axiosClient';
# import { logoutUser } from '../authSlice';
# import { FiUsers, FiStar, FiShare2, FiBookmark, FiCheckCircle, FiClock, FiTarget } from "react-icons/fi";
# import Navbar from '../components/HomeComponent/Navbar';

# function CodingPage() {
#   const dispatch = useDispatch();
#   const { user } = useSelector((state) => state.auth);
#   const [problems, setProblems] = useState([]);
#   const [solvedProblems, setSolvedProblems] = useState([]);
#   const [filters, setFilters] = useState({
#     difficulty: 'all',
#     tag: 'all',
#     status: 'all'
#   });

#   useEffect(() => {
#     const fetchProblems = async () => {
#       try {
#         const { data } = await axiosClient.get('/problem/getAllProblem');
#         setProblems(data);
#       } catch (error) {
#         console.error('Error fetching problems:', error);
#       }
#     };

#     const fetchSolvedProblems = async () => {
#       try {
#         const { data } = await axiosClient.get('/problem/problemSolvedByUser');
#         setSolvedProblems(data);
#       } catch (error) {
#         console.error('Error fetching solved problems:', error);
#       }
#     };

#     fetchProblems();
#     if (user) fetchSolvedProblems();
#   }, [user]);

#   const handleLogout = () => {
#     dispatch(logoutUser());
#     setSolvedProblems([]);
#   };

#   const filteredProblems = problems.filter(problem => {
#     const difficultyMatch = filters.difficulty === 'all' || problem.difficulty === filters.difficulty;
#     const tagMatch = filters.tag === 'all' || problem.tags === filters.tag;
#     const statusMatch = filters.status === 'all' || 
#                       solvedProblems.some(sp => sp._id === problem._id);
#     return difficultyMatch && tagMatch && statusMatch;
#   });


#   //extra
#   const getDifficultyBadgeColor = (difficulty) => {
#     switch (difficulty.toLowerCase()) {
#       case 'easy': return 'badge-success';
#       case 'medium': return 'badge-warning';
#       case 'hard': return 'badge-error';
#       default: return 'badge-neutral';
#     }
#   };

#   const getIcon = (difficulty) => {
#     switch (difficulty.toLowerCase()) {
#       case 'easy': return <FiCheckCircle className="text-green-500" />;
#       case 'medium': return <FiTarget className="text-gray-300" />;
#       case 'hard': return <FiClock className="text-orange-400" />;
#       default: return <FiUsers />;
#     }
#   };
# //


#   return (
#     <div className="min-h-screen bg-[#0d1117] text-white p-6 md:p-12 space-y-10">
#       {/* Filters */}
#       <div className="flex flex-wrap gap-4 mb-6">
#         <select 
#           className="select select-bordered"
#           value={filters.status}
#           onChange={(e) => setFilters({...filters, status: e.target.value})}
#         >
#           <option value="all">All Problems</option>
#           <option value="solved">Solved Problems</option>
#         </select>

#         <select 
#           className="select select-bordered"
#           value={filters.difficulty}
#           onChange={(e) => setFilters({...filters, difficulty: e.target.value})}
#         >
#           <option value="all">All Difficulties</option>
#           <option value="easy">Easy</option>
#           <option value="medium">Medium</option>
#           <option value="hard">Hard</option>
#         </select>

#         <select 
#           className="select select-bordered"
#           value={filters.tag}
#           onChange={(e) => setFilters({...filters, tag: e.target.value})}
#         >
#           <option value="all">All Tags</option>
#           <option value="array">Array</option>
#           <option value="linkedList">Linked List</option>
#           <option value="graph">Graph</option>
#           <option value="dp">DP</option>
#         </select>
#       </div>

#       {/* Problem List */}
#       {filteredProblems.map((problem, index) => (
#         <div key={problem._id} className="bg-[#12141c] border border-gray-700 rounded-xl p-6 space-y-3">
#           <div className="flex justify-between items-start">
#             <div className="flex items-start gap-3">
#               <div className="pt-1">{getIcon(problem.difficulty)}</div>
#               <div>
#                 <h3 className="text-lg font-semibold flex items-center gap-3">
#                   <NavLink to={`/problem/${problem._id}`} className="hover:text-primary">
#                     {problem.title}
#                   </NavLink>
#                   <span className={`text-xs bg-$
#                     {problem.difficulty === "Easy"
#                       ? "orange-400"
#                       : problem.difficulty === "Medium"
#                       ? "gray-600"
#                       : "red-700"} text-white rounded-full px-2 py-0.5`}>
#                     {problem.difficulty}
#                   </span>
#                   <span className="text-xs bg-gray-800 border border-gray-700 text-white rounded-full px-2 py-0.5">
#                     {problem.tags}
#                   </span>
#                 </h3>
#                 <p className="text-gray-400 text-sm mt-1">{problem.description || "A coding problem to solve."}</p>
#               </div>
#             </div>
#             <div className="flex flex-col items-end gap-2">
#               <button className={`text-white text-sm font-semibold px-3 py-1 rounded-md ${
#                 solvedProblems.some(sp => sp._id === problem._id) ? "bg-green-500" : "bg-orange-500"
#               }`}>
#                 {solvedProblems.some(sp => sp._id === problem._id) ? "âœ“ Solved" : "Solve"}
#               </button>
#               <div className="flex gap-3 text-gray-400">
#                 <FiBookmark className="cursor-pointer" />
#                 <FiShare2 className="cursor-pointer" />
#               </div>
#             </div>
#           </div>

#           <div className="text-gray-400 text-xs flex gap-6 pt-2 items-center">
#             <div className="flex items-center gap-1">
#               <FiUsers /> Acceptance: {problem.acceptance || "N/A"}
#             </div>
#             <div className="flex items-center gap-1">
#               <FiUsers /> {problem.submissions || "Unknown"} submissions
#             </div>
#             <div className="flex items-center gap-1">
#               <FiStar /> {problem.likes || 0} likes
#             </div>
#           </div>

#           <div className="text-sm text-gray-400 pt-2">
#             <span className="text-white">Companies:</span>
#             {(problem.companies || ["N/A"]).map((company, i) => (
#               <span
#                 key={i}
#                 className="bg-gray-800 border border-gray-700 text-xs text-white rounded-full px-2 py-0.5 ml-2"
#               >
#                 {company}
#               </span>
#             ))}
#           </div>
#         </div>
#       ))}
#     </div>
#   );
# }

# export default CodingPage;